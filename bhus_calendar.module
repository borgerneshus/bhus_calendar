<?php
function bhus_calendar_init()
{
    drupal_add_css(drupal_get_path('module', 'bhus_calendar') ."/css/oc_bhus_calendar.css");
}
function bhus_calendar_menu() {
  $items = array();
  global $user;
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'bhus_events', 'language' => LANGUAGE_NONE);
  
  $items['bhus/calendar/form/nodecreate'] = array(
    'title' => 'Edit this node',
    'description' => 'Edit this node.',
    'page callback' => 'bhus_calendar_return_form_ajax',
    'page arguments' => array('bhus_events_node_form', $node),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'access callback' => TRUE,
  );
  
  return $items;
}
function bhus_calendar_return_form_ajax($form,$node)
{
    $form = drupal_get_form($form,$node);
    echo drupal_render($form);
    drupal_exit();
}
function bhus_calendar_calendar_groupby_times_alter(&$times)
{
   $open_hours = array();
   $open_hours[] = "08:00:00";
   $open_hours[] = "09:00:00";
   $open_hours[] = "10:00:00";
   $open_hours[] = "11:00:00";
   $open_hours[] = "12:00:00";
   $open_hours[] = "13:00:00";
   $open_hours[] = "14:00:00";
   $open_hours[] = "15:00:00";
   $open_hours[] = "16:00:00";
   $open_hours[] = "17:00:00";
   $open_hours[] = "18:00:00";
   $open_hours[] = "19:00:00";
   $open_hours[] = "20:00:00";
   $open_hours[] = "21:00:00";
   $open_hours[] = "22:00:00";
   $times = $open_hours;
        
}
function bhus_calendar_node_validate($node, $form, &$form_state) {
  if ($node->type =="bhus_events" ) {
        $conflicts = array();
       $conflicts = HasTimeConflict($node,$form_state["values"]["field_date"]["und"],$form_state["values"]["field_event_location"]["und"][0]["tid"]);

        if(sizeof($conflicts) != 0)
        {
            foreach($conflicts as $index => $conflict)
            {
                /*
                 * Hack to show all date conflicts
                 */
                if($index == 0)
                {
                    form_set_error('field_date', $conflict);
                }
                else
                {
                    form_set_error('field_date_'.$index,  $conflict);
                }
            }
        }
  }
}
/*
 * Internal functions
 */
function HasTimeConflict($node,$dates,$location_tid)
{
       module_load_include('inc', 'date_repeat', 'date_repeat_calc');
       $conflicts = array();
       //get all nodes with larger or equal start date
       $query = new EntityFieldQuery();
       $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'bhus_events')
      ->propertyCondition('status', 1)
      ->propertyCondition('nid', $node->nid , "!=")
      ->fieldCondition('field_event_location', 'tid', $location_tid, '=');
       $result = $query->execute();
       
       if(sizeof($result) != 0)
       {
           foreach($result["node"] as $data)
           {
               $n = node_load($data->nid);
               $rrule = $n->field_date["und"][0]["rrule"];
               //calculate the event dates and check if they overlap with ours ?
               $rrdates =  _date_repeat_calc($rrule, $n->field_date["und"][0]['value'], null, array(), "Europe/Berlin", array());
               foreach($dates as $date)
               {
                foreach($rrdates as $rrdate)
                {
                    $rrstart =  new DateTime($rrdate);
                    $rrstart->setTimeZone(new DateTimeZone('Europe/Copenhagen'));
                    $start =  new DateTime($date['value']);
                     $start->setTimeZone(new DateTimeZone('Europe/Copenhagen'));
                    $diff = $start->diff($rrstart);
                    //dont compare differnet dates :)
                    if($diff->format('%a') !== '0')
                    {
                        continue;
                    }
                    $Hour= date("H",strtotime($n->field_date["und"][0]["value2"]));
                    $Minute= date("i",strtotime($n->field_date["und"][0]["value2"]));
                    /*
                     * is there any conflicts ? 
                     */
                    $rrend =  new DateTime($rrdate);
                    $rrend->setTime($Hour,$Minute);
                    $rrend->setTimeZone(new DateTimeZone('Europe/Copenhagen'));
                    
                    $end =  new DateTime($date['value2']);
                   
                    $end->setTimeZone(new DateTimeZone('Europe/Copenhagen'));
                    //time is in an event slot
                    if($rrstart < $start && $rrend > $end)
                    {
                        array_push($conflicts, "Konflikt(Inden for event) ".$node->title.": " . $start->format("d-m-Y H:i") . " - " .$end->format("H:i"). " / " .$rrstart->format("d-m-Y H:i") . " - " .$rrend->format("H:i"));
                        continue;
                    } //it ends inside a event
                    else if($rrstart < $start && $rrend > $start)
                    {
                         array_push($conflicts, "Konflikt(Starter i andet event) ".$node->title.": " . $start->format("d-m-Y H:i") . " - " .$end->format("H:i"). " / " .$rrstart->format("d-m-Y H:i") . " - " .$rrend->format("H:i"));
                         continue;
                    } //it ends inside a event
                    else if($rrstart < $end && $rrend > $end)
                    {
                         array_push($conflicts,"Konflikt(slutter i andet event) ".$node->title.": " . $start->format("d-m-Y H:i") . " - " .$end->format("H:i"). " / " .$rrstart->format("d-m-Y H:i") . " - " .$rrend->format("H:i"));
                         continue;
                    }
                    else if($start < $rrend && $end > $rrend)
                    {
                         array_push($conflicts,"Konflikt(overlap) ".$node->title.": " . $start->format("d-m-Y H:i") . " - " .$end->format("H:i"). " / " .$rrstart->format("d-m-Y H:i") . " - " .$rrend->format("H:i"));
                         continue;
                    }
                }
               }
           }

       }
     
      return $conflicts;
}
/**
 * Implements hook_preprocess_calendar_item().
 */
function bhus_calendar_preprocess_calendar_item(&$vars) {
  // This alter used to add a class like into item display.
  $item = $vars['item'];
  $term = taxonomy_term_load($vars['item']->entity->field_event_location["und"][0]["tid"]);
  $granularity = $vars['item']->granularity;
  $vars['item']->granularity = 'colors-taxonomy-term-' . str_replace(' ','_',$term->name) . ' ' . $granularity;

  $item = $vars['item'];

  // Hidden excude item.
  $multiday_hidden = !empty($vars['view']->style_options['multiday_hidden']) ? $vars['view']->style_options['multiday_hidden'] : array();
  foreach ($vars['view']->field as $id => $field) {
    if ($field->options['exclude'] || (!empty($item->is_multi_day) && in_array($id, $multiday_hidden))) {
      unset($vars['rendered_fields'][$id]);
    }
  }
}

function bhus_calendar_form_alter(&$form, $form_state) {

  // @NOTE: $form['#id'] will vary based on your your view & display machine names.
  // Here the view machine name is 'view' & display machine name is 'display'.
  // Use Devel's dpm() to inspect or the Views administration UI
  // to find your own form's values.

    if ($form['#id'] == 'views-exposed-form-bhus-events-page') {
        drupal_add_js(drupal_get_path('module', 'bhus_calendar') ."/js/oc_bhus_calendar.js");
        drupal_add_js(drupal_get_path('module', 'bhus_calendar') ."/js/oc_bhus_calendar_popup.js");
      // @TODO: Add form alter code.
        $form['#validate'][] = 'bhus_calendar_form_validate_custom';
       $form['submit_calendar_thisweek'] = array
        (
          '#type' => 'submit',
          '#value' => "Idag",
          //'#prefix' => '<div class="submit_calendar_thisweek">',
        );
        $form['submit_calendar_nextweek'] = array
        (
          '#type' => 'submit',
          '#value' => "Frem",
          //'#prefix' => '<div class="submit_calendar_nextweek">',
        );
        $form['submit_calendar_prevweek'] = array
        (
          '#type' => 'submit',
          '#value' => "Tilbage",
          //'#prefix' => '<div class="submit_calendar_prevweek">',
        );
       

        
    }
}
function bhus_calendar_form_validate_custom(&$form, &$form_state) {
    //make sure date selected is start of week.
    if(isset( $form_state['values']['field_date_value']['min']))
    {
        $template_start_value = "";
        
        if($form_state['clicked_button']['#id'] == "edit-submit-calendar-thisweek")
        {
               $sunday_calc = date($form['field_date_value']["min"]['#date_format'], strtotime("monday this week"));

               $template_start_value = date("Y-m-d", strtotime("monday this week"));
               
               $form['field_date_value']["max"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime('this sunday', strtotime($sunday_calc)));
               $form['field_date_value']["min"]['date']['#value'] = $sunday_calc;
               
               $form_state['values']['field_date_value']['min'] =  date("Y-m-d", strtotime("monday this week"));
               $form_state['values']['field_date_value']['max'] = date("Y-m-d", strtotime('this sunday ', strtotime(date("Y-m-d", strtotime("monday this week")))));
        }
        else if($form_state['clicked_button']['#id'] == "edit-submit-calendar-nextweek")
        {
               $date = isset($form_state['values']['field_date_value']['min']['date']) ? $form_state['values']['field_date_value']['min']['date'] : $form_state['values']['field_date_value']['min'];               
               $sunday_calc =  date("Y-m-d", strtotime('next monday', strtotime($date)));
               
               $this_sunday = date("Y-m-d",strtotime('this sunday', strtotime($sunday_calc)));
               
               $template_start_value = date("Y-m-d", strtotime('next monday', strtotime($date)));
    
               $form_state['values']['field_date_value']['min'] = $sunday_calc;
               $form_state['values']['field_date_value']['max'] = $this_sunday;
               
               $form['field_date_value']["min"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($sunday_calc));
               $form['field_date_value']["max"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($this_sunday));
               
            
        }
        else if($form_state['clicked_button']['#id'] == "edit-submit-calendar-prevweek")
        {
               $date = isset($form_state['values']['field_date_value']['min']['date']) ? $form_state['values']['field_date_value']['min']['date'] : $form_state['values']['field_date_value']['min'];
               $prev_monday =  date("Y-m-d",strtotime('previous monday ', strtotime($date)));
               
               $this_sunday = date("Y-m-d",strtotime('this sunday', strtotime($prev_monday)));
               
               $template_start_value = date("Y-m-d",strtotime('previous monday', strtotime($date)));
               
                $form_state['values']['field_date_value']['min'] = $prev_monday;
                $form_state['values']['field_date_value']['max'] = $this_sunday;
               
               $form['field_date_value']["min"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($prev_monday));
               $form['field_date_value']["max"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($this_sunday));
               
            
        }
        else
        {
            $index = date('w', strtotime($form_state['values']['field_date_value']['min']));
            if($index != 1)
            {
               $prev_monday =  date("Y-m-d", strtotime('previous monday', strtotime($form_state['values']['field_date_value']['min'])));
               $this_sunday = date("Y-m-d",strtotime('this sunday', strtotime($prev_monday)));
               
               $form['field_date_value']["max"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($this_sunday));
               $form['field_date_value']["min"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($prev_monday));
               
               $form_state['values']['field_date_value']['max'] = $this_sunday;
               $form_state['values']['field_date_value']['min'] = $prev_monday;
              
                $template_start_value = $prev_monday;
            }
            else
            {
                $this_sunday = date("Y-m-d",strtotime('this sunday', strtotime($form_state['values']['field_date_value']['min'])));
                $prev_monday =  date("Y-m-d", strtotime($form_state['values']['field_date_value']['min']));
                
                 $form['field_date_value']["min"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($prev_monday));
                 $form['field_date_value']["max"]['date']['#value'] = date($form['field_date_value']["min"]['#date_format'],strtotime($this_sunday));
                
                 $form_state['values']['field_date_value']['min'] = $prev_monday;
                 $form_state['values']['field_date_value']['max'] = $this_sunday;
                
                $template_start_value = $prev_monday;
            }
        }
        $_GET['field_date_value']['value']['date'] = $template_start_value;
    }
}
/**
 * Implements hook_theme_registry_alter().
 */
function bhus_calendar_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'bhus_calendar');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}
/*
 * 
 */
function bhus_calendar_views_query_alter(&$view, &$query) {
if ($view->name == 'bhus_events' && $view->current_display == 'page') {
if($query->where['1']['conditions'][2]['field'] != "field_data_field_event_location.field_event_location_tid")
{
$query->where['1']['conditions'][2]['field'] = "DATE_FORMAT(field_data_field_date.field_date_value, '%Y-%m-%d') >= :field_data_field_date_field_date_value AND DATE_FORMAT(field_data_field_date.field_date_value2, '%Y-%m-%d') <= :field_data_field_date_field_date_value1";
$test2 = $query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value1'];
$test1 = $query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value'];
$view->argument['date_argument']->max_date =  new DateObject(date("Y-m-d 23:00:00",strtotime($test2)));
$view->argument['date_argument']->min_date = new DateObject(date("Y-m-d 23:00:00",strtotime($test1)));

}
else
{
    $query->where['1']['conditions'][3]['field'] = "DATE_FORMAT(field_data_field_date.field_date_value, '%Y-%m-%d') >= :field_data_field_date_field_date_value AND DATE_FORMAT(field_data_field_date.field_date_value2, '%Y-%m-%d') <= :field_data_field_date_field_date_value1";
    $test2 = $query->where['1']['conditions'][3]['value'][':field_data_field_date_field_date_value1'];
$test1 = $query->where['1']['conditions'][3]['value'][':field_data_field_date_field_date_value'];
$view->argument['date_argument']->max_date =  new DateObject(date("Y-m-d 23:00:00",strtotime($test2)));
$view->argument['date_argument']->min_date = new DateObject(date("Y-m-d 23:00:00",strtotime($test1)));
    
}
//$query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value']= date('Y-m-d',strtotime($query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value']));
//$query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value1']= date('Y-m-d',strtotime($query->where['1']['conditions'][2]['value'][':field_data_field_date_field_date_value1']));
unset($query->where['date']);

}
}
